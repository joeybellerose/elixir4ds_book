# 3.1 - Getting Started

## What Library Are You Going To Use?

Going forward, you will be using the Vega-Lite library to create all our charts and graphics. Vega-Lite describes themselves as “A High-Level Grammar of Interactive Graphics”. What does that mean? Let’s break it down into 3 sections.

1). What is High-Level?

High-level is in relation to other graphic libraries (i.e. Vega and D3.js). Both are libraries that Vega-Lite is built upon. The “level” refers to the detail and code needed to generate a graph. Vega-Lite requires far less code than either of the other libraries.

2). What is the "Grammar of Graphics"?

Grammar of Graphics is a framework to approach the creation of graphics by breaking every chart down into its most basic building blocks. This approach was originally popularized by Leeland Wilkinson in his book titled “The Grammar of Graphics”.

Below is an image depicting the primary layers used to create a chart using the Grammar of Graphics framework.

![](images/3.1-grammarofgraphics.png)

The benefit here is that instead of describing how to create your chart (e.g. calculating where to position each element), you describe what you want to see. Simply pass the data and tell the framework what to visualize. For example, there is no need to figure out how to calculate different coordinate types (Linear, Circular, and Map) as shown below.

<!-- livebook:{"break_markdown":true} -->

* [Linear](https://vega.github.io/vega-lite/examples/point_color_with_shape.html)

![](images/3.1-linearcoord.png)

* [Circular](https://vega.github.io/vega-lite/examples/arc_radial.html)

![](images/3.1-circularcoord.png)

* [Map](https://vega.github.io/vega-lite/examples/geo_choropleth.html)

![](images/3.1-mapcoord.png)

<!-- livebook:{"break_markdown":true} -->

3). What About Interactivity?

The Vega-Lite team has extended the original Grammar of Graphics to include a layer for interactivity. They define their building blocks for interaction as [Parameters](https://vega.github.io/vega-lite/docs/parameter.html). Parameters can be either simple variables that change a specific feature or complex selections as shown below.

* Simple Variable

![](images/3.1-simplevariable.mp4)

* Complex Selection

![](images/3.1-complexselection.mp4)

<!-- livebook:{"break_markdown":true} -->

5 of the most common building blocks you’ll use in VegaLite are:

1. Data — Read information in
2. Scales — Transform the data into the right domain
3. Axes — Define the lines, ticks, and labels
4. Legends — Provide context to the visuals
5. Marks — Specify the shape to be displayed

## How Do You Get Started?

Before you can get started, you will need to first install a few packages for Elixir.

* VegaLite — Create charts
* Kino_Vega_Lite — Makes VegaLite render in Livebook
* Kino — Interactive Livebook widgets
* Explorer — Manipulate and clean data with DataFrames

With Livebook, installation is simple. All you need to do is search for the packages you want and the click the “Setup” button to install them.

![](images/3.1-installpackages.mp4)

<!-- livebook:{"break_markdown":true} -->

> Note {: .tip}
> The [VegaLite](https://hexdocs.pm/vega_lite/VegaLite.html) package is a simple wrapper around the original [Vega-Lite](https://vega.github.io/vega-lite/) JavaScript library so that the Elixir community did not have to re-create it from scratch.

## Wrapping Up

Data Visualization is an important process for simplifying complex ideas and allows us to communicate our findings with others and ourselves. It is not simply for generating reports, but communication along the whole Data Science process. In the next section, we’ll be looking at how to get started with reading data into Livebook and making a basic chart.
