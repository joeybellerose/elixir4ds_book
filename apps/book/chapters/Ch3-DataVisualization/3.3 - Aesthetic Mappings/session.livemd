# 3.3 Aesthetic Mappings

```elixir
Mix.install([
  {:explorer, "~> 0.3.1"},
  {:vega_lite, "~> 0.1.6"},
  {:kino, "~> 0.7.0"},
  {:kino_vega_lite, "~> 0.1.4"}
])
```

## Alias Packages

```elixir
alias Explorer.{DataFrame, Series}
alias VegaLite, as: Vl
```

## Read in Data

```elixir
file_path = "/Users/joeybellerose/Documents/elixir4ds/data/mpg.csv"

df =
  DataFrame.from_csv!(file_path)
  |> DataFrame.select("", :drop)
```

## Charts

Display `hwy` as y and `displ` as x and highlight outliers as red

```elixir
Vl.new(width: 500)
|> Vl.data_from_values(df)
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "displ", type: :quantitative)
|> Vl.encode_field(:y, "hwy", type: :quantitative)
|> Vl.encode(:color,
  condition: %{test: "datum['displ'] > 5 & datum['hwy'] > 20", value: "red"},
  value: "black"
)
```

Display `hwy` as y and `displ` as x and `class` as color

```elixir
Vl.new(width: 500, height: 400)
|> Vl.data_from_values(df, only: ["displ", "hwy", "class"])
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "displ", type: :quantitative)
|> Vl.encode_field(:y, "hwy", type: :quantitative)
|> Vl.encode_field(:color, "class", type: :nominal)
```

Display `hwy` as y and `displ` as x and `class` as size

```elixir
Vl.new(width: 400, height: 400)
|> Vl.data_from_values(df)
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "displ", type: :quantitative)
|> Vl.encode_field(:y, "hwy", type: :quantitative)
|> Vl.encode_field(:size, "class", type: :nominal)
|> Vl.encode(:color, value: "black")
```

Display `hwy` as y and `displ` as x and `class` as opacity

```elixir
Vl.new(width: 400, height: 400)
|> Vl.data_from_values(df, only: ["displ", "hwy", "class"])
|> Vl.mark(:circle)
|> Vl.encode_field(:x, "displ", type: :quantitative)
|> Vl.encode_field(:y, "hwy", type: :quantitative)
|> Vl.encode_field(:opacity, "class", type: :nominal)
```

Display `hwy` as y and `displ` as x and `class` as shape

```elixir
Vl.new(width: 400, height: 400)
|> Vl.data_from_values(df, only: ["displ", "hwy", "class"])
|> Vl.mark(:point)
|> Vl.encode_field(:x, "displ", type: :quantitative)
|> Vl.encode_field(:y, "hwy", type: :quantitative)
|> Vl.encode_field(:shape, "class", type: :nominal)
```

Create side-by-side from charts above

```elixir
Vl.new(width: 400, height: 400)
|> Vl.data_from_values(df, only: ["displ", "hwy", "class"])
|> Vl.concat(
  [
    Vl.new()
    |> Vl.mark(:circle)
    |> Vl.encode_field(:x, "displ", type: :quantitative)
    |> Vl.encode_field(:y, "hwy", type: :quantitative)
    |> Vl.encode_field(:opacity, "class", type: :nominal),
    Vl.new()
    |> Vl.mark(:point)
    |> Vl.encode_field(:x, "displ", type: :quantitative)
    |> Vl.encode_field(:y, "hwy", type: :quantitative)
    |> Vl.encode_field(:shape, "class", type: :nominal)
  ],
  :wrappable
)
```
